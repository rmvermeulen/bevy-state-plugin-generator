---
source: src/generator/tests.rs
expression: "generate_all_type_definitions(&StateNode::list(\"List\",\n[StateNode::singleton(\"Item1\"),\nStateNode::enumeration(\"Item2\",\n[StateNode::singleton(\"A\"), StateNode::singleton(\"B\"),]),\nStateNode::singleton(\"Item3\"),]),\n(ParentState::from((\"GameState\", \"Alpha\")), NamingScheme::Full).into())"
---
#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Alpha)]
pub struct GameList;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Alpha)]
pub struct GameItem1;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Alpha)]
pub enum GameItem2State {
    #[default]
    A,
      B
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameItem2 = GameItem2::A)]
pub struct GameItem2A;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameItem2 = GameItem2::B)]
pub struct GameItem2B;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Alpha)]
pub struct GameItem3;
