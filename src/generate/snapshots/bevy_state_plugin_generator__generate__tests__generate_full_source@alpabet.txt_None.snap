---
source: src/generate/tests.rs
expression: "generate_state_plugin_source(source, config, Some(src_path)).unwrap()"
---
// generated by bevy_state_plugin_generator v[CARGO_PKG_VERSION]
// src: alpabet.txt
// A B C D E F G H I

#![allow(missing_docs)]
use bevy::prelude::{AppExtStates, StateSet};
#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct A;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct B;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct C;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct D;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct E;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct F;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct G;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct H;

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub struct I;

pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<A>()
            .init_state::<B>()
            .init_state::<C>()
            .init_state::<D>()
            .init_state::<E>()
            .init_state::<F>()
            .init_state::<G>()
            .init_state::<H>()
            .init_state::<I>();
    }
}
