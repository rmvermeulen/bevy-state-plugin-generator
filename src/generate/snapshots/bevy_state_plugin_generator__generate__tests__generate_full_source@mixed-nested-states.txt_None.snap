---
source: src/generate/tests.rs
expression: "generate_state_plugin_source(source, config, Some(src_path)).unwrap()"
---
// generated by bevy_state_plugin_generator v[CARGO_PKG_VERSION]
// src: mixed-nested-states.txt
// A { B [C] } D { E F [ G H ] I }

#![allow(missing_docs)]
use bevy::prelude::{AppExtStates, StateSet};
#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub enum A {
    #[default]
    B,
}

#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub enum D {
    #[default]
    E,
    F,
    I,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(A = A::B)]
pub struct AB;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(D = D::E)]
pub struct DE;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(D = D::F)]
pub struct DF;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(D = D::I)]
pub struct DI;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(AB = AB)]
pub struct ABC;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(DF = DF)]
pub struct DFG;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(DF = DF)]
pub struct DFH;

pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<A>()
            .init_state::<D>()
            .add_sub_state::<AB>()
            .add_sub_state::<DE>()
            .add_sub_state::<DF>()
            .add_sub_state::<DI>()
            .add_sub_state::<ABC>()
            .add_sub_state::<DFG>()
            .add_sub_state::<DFH>();
    }
}
