---
source: src/generate/tests.rs
expression: "generate_plugin_source(Rc::new(states), Default::default())"
---
#![allow(missing_docs)]
use bevy::prelude::AppExtStates;
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub enum GameState { #[default] Loading, Ready }

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Loading)]
pub struct GameStateLoading;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::Ready)]
pub enum GameStateReady { #[default] Menu, Game }

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReady = GameStateReady::Menu)]
pub enum GameStateReadyMenu { #[default] Main, Options }

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReadyMenu = GameStateReadyMenu::Main)]
pub struct GameStateReadyMenuMain;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReadyMenu = GameStateReadyMenu::Options)]
pub struct GameStateReadyMenuOptions;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReady = GameStateReady::Game)]
pub enum GameStateReadyGame { #[default] Playing, Paused, GameOver }

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReadyGame = GameStateReadyGame::Playing)]
pub struct GameStateReadyGamePlaying;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReadyGame = GameStateReadyGame::Paused)]
pub struct GameStateReadyGamePaused;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameStateReadyGame = GameStateReadyGame::GameOver)]
pub struct GameStateReadyGameGameOver;
}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) { 
        app.init_state::<states::GameState>();
    }
}
