---
source: src/generate/tests.rs
expression: "generate_state_plugin_source(source, config, Some(src_path)).unwrap()"
---
// generated by bevy_state_plugin_generator v[CARGO_PKG_VERSION]
// src: alpabet.txt
// A B C D E F G H I

use bevy::prelude::AppExtStates;
#[allow(missing_docs)]
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub enum GameState {
    #[default]
    A,
      B,
      C,
      D,
      E,
      F,
      G,
      H,
      I
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::A)]
pub struct GameStateA;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::B)]
pub struct GameStateB;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::C)]
pub struct GameStateC;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::D)]
pub struct GameStateD;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::E)]
pub struct GameStateE;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::F)]
pub struct GameStateF;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::G)]
pub struct GameStateG;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::H)]
pub struct GameStateH;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameState = GameState::I)]
pub struct GameStateI;

}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<states::GameState>().add_sub_state::<states::GameStateA>()
            .add_sub_state::<states::GameStateB>()
            .add_sub_state::<states::GameStateC>()
            .add_sub_state::<states::GameStateD>()
            .add_sub_state::<states::GameStateE>()
            .add_sub_state::<states::GameStateF>()
            .add_sub_state::<states::GameStateG>()
            .add_sub_state::<states::GameStateH>()
            .add_sub_state::<states::GameStateI>();
    }
}
