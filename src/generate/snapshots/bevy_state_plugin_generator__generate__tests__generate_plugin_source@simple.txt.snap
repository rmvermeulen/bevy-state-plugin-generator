---
source: src/generate/tests.rs
expression: "test_plugin_formatted(root_node, Default::default())"
---
#![allow(missing_docs)]
use bevy::prelude::AppExtStates;
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum GameState {
        #[default]
        Loading,
        Ready,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameState = GameState::Loading)]
    pub struct GameStateLoading;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameState = GameState::Ready)]
    pub enum GameStateReady {
        #[default]
        Menu,
        Game,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateReady = GameStateReady::Menu)]
    pub struct GameStateReadyMenu;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateReady = GameStateReady::Game)]
    pub struct GameStateReadyGame;
}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<states::GameState>()
            .add_sub_state::<states::GameStateLoading>()
            .add_sub_state::<states::GameStateReady>()
            .add_sub_state::<states::GameStateReadyMenu>()
            .add_sub_state::<states::GameStateReadyGame>();
    }
}
