---
source: src/generate/tests.rs
expression: "generate_state_plugin_source(source, plugin_config, Some(src_path)).unwrap()"
---
// generated by bevy_state_plugin_generator v[CARGO_PKG_VERSION]
// src: mixed-nested-states.txt
// A { B [C] } D { E F [ G H ] I }

use bevy::prelude::AppExtStates;
#[allow(missing_docs)]
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum A {
        #[default]
        B,
    }

    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum D {
        #[default]
        E,
        F,
        I,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(A = A::B)]
    pub struct B;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(D = D::E)]
    pub struct E;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(D = D::F)]
    pub struct F;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(D = D::I)]
    pub struct I;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(B = B::C)]
    pub struct C;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(F = F::G)]
    pub struct G;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(F = F::H)]
    pub struct H;
}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<states::A>()
            .init_state::<states::D>()
            .add_sub_state::<states::AB>()
            .add_sub_state::<states::DE>()
            .add_sub_state::<states::DF>()
            .add_sub_state::<states::DI>()
            .add_sub_state::<states::ABC>()
            .add_sub_state::<states::DFG>()
            .add_sub_state::<states::DFH>();
    }
}
