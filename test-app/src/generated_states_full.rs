// generated by bevy_state_plugin_generator v1.4.2
// src: src/states.txt
// Loading {
//     Configs
//     Assets
// }
// Ready {
//     Playing
//     Paused
// }
// Exiting

use bevy::prelude::AppExtStates;
#[allow(missing_docs)]
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum GameState {
        #[default]
        Loading,
        Ready,
        Exiting,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameState = GameState::Loading)]
    pub enum GameStateLoading {
        #[default]
        Configs,
        Assets,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameState = GameState::Ready)]
    pub enum GameStateReady {
        #[default]
        Playing,
        Paused,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameState = GameState::Exiting)]
    pub struct GameStateExiting;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateLoading = GameStateLoading::Configs)]
    pub struct GameStateLoadingConfigs;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateLoading = GameStateLoading::Assets)]
    pub struct GameStateLoadingAssets;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateReady = GameStateReady::Playing)]
    pub struct GameStateReadyPlaying;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(GameStateReady = GameStateReady::Paused)]
    pub struct GameStateReadyPaused;
}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<states::GameState>()
            .add_sub_state::<states::GameStateLoading>()
            .add_sub_state::<states::GameStateReady>()
            .add_sub_state::<states::GameStateExiting>()
            .add_sub_state::<states::GameStateLoadingConfigs>()
            .add_sub_state::<states::GameStateLoadingAssets>()
            .add_sub_state::<states::GameStateReadyPlaying>()
            .add_sub_state::<states::GameStateReadyPaused>();
    }
}
