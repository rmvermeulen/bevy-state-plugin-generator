// generated by bevy_state_plugin_generator v2.0.0-dev
// src: src/states.txt
// Game {
//     Loading {
//         // configuration, including which assets to load
//         Configuration
//         // load actual assets; images, sounds, etc.
//         Assets
//     }
//     Ready {
//         Paused
//         Playing [
//             Player { Alive Dead Invincible }
//             Enemies { Passive Aggressive Defensive }
//             Weather { Nice Mist Rain Hot Cold }
//         ]
//     }
//     Exiting
// }

#![allow(missing_docs)]
use bevy::prelude::{AppExtStates, StateSet};
#[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
pub enum Game {
    #[default]
    Loading,
    Ready,
    Exiting,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(Game = Game::Loading)]
pub enum GameLoading {
    #[default]
    Configuration,
    Assets,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(Game = Game::Ready)]
pub enum GameReady {
    #[default]
    Paused,
    Playing,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(Game = Game::Exiting)]
pub struct GameExiting;

// configuration, including which assets to load
#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameLoading = GameLoading::Configuration)]
pub struct GameLoadingConfiguration;

// load actual assets; images, sounds, etc.
#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameLoading = GameLoading::Assets)]
pub struct GameLoadingAssets;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReady = GameReady::Paused)]
pub struct GameReadyPaused;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReady = GameReady::Playing)]
pub struct GameReadyPlaying;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlaying = GameReadyPlaying)]
pub enum GameReadyPlayingPlayer {
    #[default]
    Alive,
    Dead,
    Invincible,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlaying = GameReadyPlaying)]
pub enum GameReadyPlayingEnemies {
    #[default]
    Passive,
    Aggressive,
    Defensive,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlaying = GameReadyPlaying)]
pub enum GameReadyPlayingWeather {
    #[default]
    Nice,
    Mist,
    Rain,
    Hot,
    Cold,
}

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingPlayer = GameReadyPlayingPlayer::Alive)]
pub struct GameReadyPlayingPlayerAlive;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingPlayer = GameReadyPlayingPlayer::Dead)]
pub struct GameReadyPlayingPlayerDead;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingPlayer = GameReadyPlayingPlayer::Invincible)]
pub struct GameReadyPlayingPlayerInvincible;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingEnemies = GameReadyPlayingEnemies::Passive)]
pub struct GameReadyPlayingEnemiesPassive;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingEnemies = GameReadyPlayingEnemies::Aggressive)]
pub struct GameReadyPlayingEnemiesAggressive;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingEnemies = GameReadyPlayingEnemies::Defensive)]
pub struct GameReadyPlayingEnemiesDefensive;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingWeather = GameReadyPlayingWeather::Nice)]
pub struct GameReadyPlayingWeatherNice;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingWeather = GameReadyPlayingWeather::Mist)]
pub struct GameReadyPlayingWeatherMist;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingWeather = GameReadyPlayingWeather::Rain)]
pub struct GameReadyPlayingWeatherRain;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingWeather = GameReadyPlayingWeather::Hot)]
pub struct GameReadyPlayingWeatherHot;

#[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
#[source(GameReadyPlayingWeather = GameReadyPlayingWeather::Cold)]
pub struct GameReadyPlayingWeatherCold;

pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<Game>()
            .add_sub_state::<GameLoading>()
            .add_sub_state::<GameReady>()
            .add_sub_state::<GameExiting>()
            .add_sub_state::<GameLoadingConfiguration>()
            .add_sub_state::<GameLoadingAssets>()
            .add_sub_state::<GameReadyPaused>()
            .add_sub_state::<GameReadyPlaying>()
            .add_sub_state::<GameReadyPlayingPlayer>()
            .add_sub_state::<GameReadyPlayingEnemies>()
            .add_sub_state::<GameReadyPlayingWeather>()
            .add_sub_state::<GameReadyPlayingPlayerAlive>()
            .add_sub_state::<GameReadyPlayingPlayerDead>()
            .add_sub_state::<GameReadyPlayingPlayerInvincible>()
            .add_sub_state::<GameReadyPlayingEnemiesPassive>()
            .add_sub_state::<GameReadyPlayingEnemiesAggressive>()
            .add_sub_state::<GameReadyPlayingEnemiesDefensive>()
            .add_sub_state::<GameReadyPlayingWeatherNice>()
            .add_sub_state::<GameReadyPlayingWeatherMist>()
            .add_sub_state::<GameReadyPlayingWeatherRain>()
            .add_sub_state::<GameReadyPlayingWeatherHot>()
            .add_sub_state::<GameReadyPlayingWeatherCold>();
    }
}
