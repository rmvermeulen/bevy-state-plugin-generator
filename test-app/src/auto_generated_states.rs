// generated by bevy_state_plugin_generator v1.4.3
// WARN: unknown setting: 'nonsense'
// WARN: unknown setting: 'nonsense'
// WARN: unknown setting: 'plugin_name'
// WARN: unknown setting: 'root_state_name'
// WARN: unknown setting: 'naming_scheme'
// WARN: unknown setting: 'states_module_name'
// bspg:nonsense 123
// bspg:plugin_name MyCustomStatesPlugin
// bspg:root_state_name RootState
// bspg:naming_scheme   Full
// bspg:states_module_name   lmao
// bspg:
// Loading {
//     Configs
//     Assets
// }
// Ready {
//     Playing
//     Paused
// }
// Exiting

use bevy::prelude::AppExtStates;
#[allow(missing_docs)]
pub mod lmao {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum RootState {
        #[default]
        Loading,
        Ready,
        Exiting,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Loading)]
    pub enum RootStateLoading {
        #[default]
        Configs,
        Assets,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Ready)]
    pub enum RootStateReady {
        #[default]
        Playing,
        Paused,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Exiting)]
    pub struct RootStateExiting;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootStateLoading = RootStateLoading::Configs)]
    pub struct RootStateLoadingConfigs;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootStateLoading = RootStateLoading::Assets)]
    pub struct RootStateLoadingAssets;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootStateReady = RootStateReady::Playing)]
    pub struct RootStateReadyPlaying;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootStateReady = RootStateReady::Paused)]
    pub struct RootStateReadyPaused;
}
pub struct MyCustomStatesPlugin;
impl bevy::app::Plugin for MyCustomStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<lmao::RootState>()
            .add_sub_state::<lmao::RootStateLoading>()
            .add_sub_state::<lmao::RootStateReady>()
            .add_sub_state::<lmao::RootStateExiting>()
            .add_sub_state::<lmao::RootStateLoadingConfigs>()
            .add_sub_state::<lmao::RootStateLoadingAssets>()
            .add_sub_state::<lmao::RootStateReadyPlaying>()
            .add_sub_state::<lmao::RootStateReadyPaused>();
    }
}
