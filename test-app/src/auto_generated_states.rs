// generated by bevy_state_plugin_generator v1.4.0
// WARN: unknown setting: 'nonsense'
// WARN: unknown setting: 'dum'
// bspg:nonsense 123
// bspg:root_state_name RootState
// bspg:dum dum
// bspg:naming_scheme   Full
// bspg:
// Loading {
//     Configs
//     Assets
// }
// Ready {
//     Playing
//     Paused
// }
// Exiting

use bevy::prelude::AppExtStates;
#[allow(missing_docs)]
pub mod states {
    use bevy::prelude::StateSet;
    #[derive(bevy::prelude::States, Hash, Default, Debug, Clone, PartialEq, Eq)]
    pub enum RootState {
        #[default]
        Loading,
        Ready,
        Exiting,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Loading)]
    pub enum Loading {
        #[default]
        Configs,
        Assets,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Ready)]
    pub enum Ready {
        #[default]
        Playing,
        Paused,
    }

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(RootState = RootState::Exiting)]
    pub struct Exiting;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(Loading = Loading::Configs)]
    pub struct Configs;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(Loading = Loading::Assets)]
    pub struct Assets;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(Ready = Ready::Playing)]
    pub struct Playing;

    #[derive(bevy::prelude::SubStates, Hash, Default, Debug, Clone, PartialEq, Eq)]
    #[source(Ready = Ready::Paused)]
    pub struct Paused;
}
pub struct GeneratedStatesPlugin;
impl bevy::app::Plugin for GeneratedStatesPlugin {
    fn build(&self, app: &mut bevy::app::App) {
        app.init_state::<states::RootState>()
            .add_sub_state::<states::RootStateLoading>()
            .add_sub_state::<states::RootStateReady>()
            .add_sub_state::<states::RootStateExiting>()
            .add_sub_state::<states::RootStateLoadingConfigs>()
            .add_sub_state::<states::RootStateLoadingAssets>()
            .add_sub_state::<states::RootStateReadyPlaying>()
            .add_sub_state::<states::RootStateReadyPaused>();
    }
}
